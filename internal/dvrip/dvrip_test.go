package dvrip

import (
	"net"
	"testing"
)

func TestKeepAlive(t *testing.T) {
	ln, err := net.Listen("tcp4", "")
	if err != nil {
		panic(err)
	}

	go func() {
		conn, err := ln.Accept()
		if err != nil {
			panic(err)
		}

		defer conn.Close()
		var b = make([]byte, 98)
		_, err = conn.Read(b)
		if err != nil {
			t.Fatal(err)
		}

		_, err = conn.Write([]byte{
			0xff, 0x01, 0x00, 0x00, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xe9, 0x03,
			0x80, 0x00, 0x00, 0x00, 0x7b, 0x20, 0x22, 0x41, 0x6c, 0x69, 0x76, 0x65, 0x49, 0x6e, 0x74, 0x65,
			0x72, 0x76, 0x61, 0x6c, 0x22, 0x20, 0x3a, 0x20, 0x33, 0x30, 0x2c, 0x20, 0x22, 0x43, 0x68, 0x61,
			0x6e, 0x6e, 0x65, 0x6c, 0x4e, 0x75, 0x6d, 0x22, 0x20, 0x3a, 0x20, 0x31, 0x2c, 0x20, 0x22, 0x44,
			0x65, 0x76, 0x69, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x20, 0x22, 0x20, 0x3a, 0x20, 0x22, 0x49,
			0x50, 0x43, 0x22, 0x2c, 0x20, 0x22, 0x45, 0x78, 0x74, 0x72, 0x61, 0x43, 0x68, 0x61, 0x6e, 0x6e,
			0x65, 0x6c, 0x22, 0x20, 0x3a, 0x20, 0x30, 0x2c, 0x20, 0x22, 0x52, 0x65, 0x74, 0x22, 0x20, 0x3a,
			0x20, 0x31, 0x30, 0x30, 0x2c, 0x20, 0x22, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x44,
			0x22, 0x20, 0x3a, 0x20, 0x22, 0x30, 0x78, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x31, 0x38, 0x22,
			0x20, 0x7d, 0x0a, 0x00,
		})

		if err != nil {
			t.Fatal(err)
		}

		b = make([]byte, 65)
		_, err = conn.Read(b)
		if err != nil {
			t.Fatal(err)
		}

		_, err = conn.Write([]byte{
			0xff, 0x01, 0x00, 0x00, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xe9, 0x03,
			0x80, 0x00, 0x00, 0x00, 0x7b, 0x20, 0x22, 0x41, 0x6c, 0x69, 0x76, 0x65, 0x49, 0x6e, 0x74, 0x65,
			0x72, 0x76, 0x61, 0x6c, 0x22, 0x20, 0x3a, 0x20, 0x33, 0x30, 0x2c, 0x20, 0x22, 0x43, 0x68, 0x61,
			0x6e, 0x6e, 0x65, 0x6c, 0x4e, 0x75, 0x6d, 0x22, 0x20, 0x3a, 0x20, 0x31, 0x2c, 0x20, 0x22, 0x44,
			0x65, 0x76, 0x69, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x20, 0x22, 0x20, 0x3a, 0x20, 0x22, 0x49,
			0x50, 0x43, 0x22, 0x2c, 0x20, 0x22, 0x45, 0x78, 0x74, 0x72, 0x61, 0x43, 0x68, 0x61, 0x6e, 0x6e,
			0x65, 0x6c, 0x22, 0x20, 0x3a, 0x20, 0x30, 0x2c, 0x20, 0x22, 0x52, 0x65, 0x74, 0x22, 0x20, 0x3a,
			0x20, 0x31, 0x30, 0x30, 0x2c, 0x20, 0x22, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x44,
			0x22, 0x20, 0x3a, 0x20, 0x22, 0x30, 0x78, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x31, 0x38, 0x22,
			0x20, 0x7d, 0x0a, 0x00,
		})

		if err != nil {
			t.Fatal(err)
		}
	}()

	conn, err := New(Settings{
		Address:  ln.Addr().String(),
		User:     "foo",
		Password: "bar",
	})

	if err != nil {
		t.Fatal(err)
	}

	err = conn.Login()
	if err != nil {
		t.Fatal(err)
	}

	err = conn.SetKeepAlive()
	if err != nil {
		t.Fatal(err)
	}
}

func TestLogin(t *testing.T) {
	ln, err := net.Listen("tcp4", "")
	if err != nil {
		panic(err)
	}

	go func() {
		conn, err := ln.Accept()
		if err != nil {
			t.Fatal(err)
		}

		defer conn.Close()

		var b = make([]byte, 98)
		_, err = conn.Read(b)
		if err != nil {
			t.Fatal(err)
		}

		// { "AliveInterval" : 30, "ChannelNum" : 1, "DeviceType " : "IPC", "ExtraChannel" : 0, "Ret" : 100, "SessionID" : "0x00000018" }
		_, err = conn.Write([]byte{
			0xff, 0x01, 0x00, 0x00, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xe9, 0x03,
			0x80, 0x00, 0x00, 0x00, 0x7b, 0x20, 0x22, 0x41, 0x6c, 0x69, 0x76, 0x65, 0x49, 0x6e, 0x74, 0x65,
			0x72, 0x76, 0x61, 0x6c, 0x22, 0x20, 0x3a, 0x20, 0x33, 0x30, 0x2c, 0x20, 0x22, 0x43, 0x68, 0x61,
			0x6e, 0x6e, 0x65, 0x6c, 0x4e, 0x75, 0x6d, 0x22, 0x20, 0x3a, 0x20, 0x31, 0x2c, 0x20, 0x22, 0x44,
			0x65, 0x76, 0x69, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x20, 0x22, 0x20, 0x3a, 0x20, 0x22, 0x49,
			0x50, 0x43, 0x22, 0x2c, 0x20, 0x22, 0x45, 0x78, 0x74, 0x72, 0x61, 0x43, 0x68, 0x61, 0x6e, 0x6e,
			0x65, 0x6c, 0x22, 0x20, 0x3a, 0x20, 0x30, 0x2c, 0x20, 0x22, 0x52, 0x65, 0x74, 0x22, 0x20, 0x3a,
			0x20, 0x31, 0x30, 0x30, 0x2c, 0x20, 0x22, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x44,
			0x22, 0x20, 0x3a, 0x20, 0x22, 0x30, 0x78, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x31, 0x38, 0x22,
			0x20, 0x7d, 0x0a, 0x00,
		})

		if err != nil {
			t.Fatal(err)
		}
	}()

	conn, err := New(Settings{
		Address:  ln.Addr().String(),
		User:     "foo",
		Password: "bar",
	})

	if err != nil {
		t.Fatal(err)
	}

	err = conn.Login()
	if err != nil {
		panic(err)
	}
}
